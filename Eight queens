#include <stdio.h>

#define N 8
int total_solutions = 0;
void solve_queens(int board[N][N], int row);
int is_safe(int board[N][N], int row, int col);

int main() {
    int board[N][N] = { 0 };

    solve_queens(board, 0);

    printf("解决方案总数: %d\n", total_solutions);

    return 0;
}


int is_safe(int board[N][N], int row, int col) {
    int i, j;

    // 检查当前列是否有皇后冲突
    for (i = 0; i < row; i++) {
        if (board[i][col] == 1) {
            return 0;
        }
    }

    // 检查左上对角线是否有皇后冲突
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return 0;
        }
    }

    // 检查右上对角线是否有皇后冲突
    for (i = row, j = col; i >= 0 && j < N; i--, j++) {
        if (board[i][j] == 1) {
            return 0;
        }
    }

    // 当前位置安全
    return 1;
}

void solve_queens(int board[N][N], int row) {
    int col;

    // 所有皇后都放置完毕
    if (row == N) {
        total_solutions++;
        printf("方案 %d:\n", total_solutions);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%c ", board[i][j] ? 'Q' : '.');
            }
            printf("\n");
        }
        printf("\n");
        return;
    }

    // 尝试在当前行的每个列中放置皇后
    for (col = 0; col < N; col++) {
        if (is_safe(board, row, col)) {
            // 放置皇后
            board[row][col] = 1;

            // 递归地放置下一行的皇后
            solve_queens(board, row + 1);

            // 回溯，移除当前位置的皇后
            board[row][col] = 0;
        }
    }
}
